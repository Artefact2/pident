#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

require __DIR__.'/lib/inc.main.php';
$pg = $GLOBALS['pg'];

/* Make sure we have bitcoind */
if(strpos(shell_exec('bitcoind getblockbycount 42'), '00000000314e90489514c787d615cea50003af2023796ccdd085b6bcc1fa28f5') === false) {
	echo 'bitcoind not in $PATH, or unpatched bitcoind present (must have getblockbyhash/getblockbycount) !'."\n";
	die(1);
}

/* See if we need to do the initial dump */
$genesis = json_decode(shell_exec('bitcoind getblockbycount 0'), true);
$hasGenesis = pg_query_params($pg, 'SELECT COUNT(hash) FROM blocks WHERE hash = $1', array(hex2bits($genesis['hash'])));
$r = pg_fetch_row($hasGenesis);
$initialDump = ($r[0] == 0);
pg_free_result($hasGenesis);

$max = trim(shell_exec('bitcoind getblockcount'));
$c = strlen($max);

if($initialDump) {
	echo "Performing the initial dump. This step must only be done once, but it will take a long time !\nDO NOT INTERRUPT THE PROCESS.\n";
	pg_query('TRUNCATE TABLE blocks, transactions, tx_in, tx_out CASCADE');
	$start = 0;
} else {
	$recent = pg_query($pg, 'SELECT hash FROM blocks ORDER BY time DESC LIMIT 200');
	while($r = pg_fetch_row($recent)) {
		$stop[bits2hex($r[0])] = true;
	}

	for($i = $max; $i >= 0; --$i) {
		$blk = json_decode(shell_exec('bitcoind getblockbycount '.$i), true);
		if(isset($stop[$blk['hash']])) {
			$start = $i + 1;
			break;		
		}
	}
	if(!isset($start)) $start = 0;
}

for($i = $start; $i <= $max; ++$i) {
	$fI = str_pad($i, $c, '0', STR_PAD_LEFT);
	$blk = json_decode(shell_exec('bitcoind getblockbycount '.$i), true);

	echo "\r$fI/$max processing... (".$blk['hash'].")";

	insertBlock($i, $blk, ($max - $i) <= 120);
}

if(isset($fI)) {
	invalidateCache('index');
	invalidateCache('more', 'page*', true);

	$max = pg_fetch_row(pg_query('SELECT MAX(number) FROM blocks;'));
	$max = $max[0];

	$req = pg_query("
	SELECT current.hash FROM blocks AS current
	LEFT JOIN blocks AS nextb ON current.hash = nextb.previous_hash
	WHERE current.number < $max
	AND nextb.hash IS NULL
	");
	$orphans = array();
	while($r = pg_fetch_row($req)) {
		$orphans[] = "B'".$r[0]."'";
	}
	if(($c = count($orphans)) > 0) {
		echo "\npruning $c orphan blocks...";
		
		$in = implode(',', $orphans);

		$potentiallyOrphan = array();
		$req = pg_query("
		SELECT DISTINCT transaction_id
		FROM blocks_transactions
		WHERE block IN ($in);
		");
		while($r = pg_fetch_row($req)) {
			$potentiallyOrphan[] = "B'".$r[0]."'";
		}

		pg_query("BEGIN;
		DELETE FROM blocks_transactions WHERE block IN ($in);
		DELETE FROM blocks WHERE hash IN ($in);
		COMMIT;");
	
		$in = implode(',', $potentiallyOrphan);
		$req = pg_query("
		SELECT DISTINCT transactions.transaction_id
		FROM transactions
		LEFT JOIN blocks_transactions ON blocks_transactions.transaction_id = transactions.transaction_id
		WHERE block IS NULL
		AND transactions.transaction_id IN ($in);
		");
		$orphanTxs = array();
		while($r = pg_fetch_row($req)) {
			$orphanTxs[] = "B'".$r[0]."'";
		}
		$c = count($orphanTxs);
		if($c > 0) {
			echo "\npruning $c orphan transactions...";
			$in = implode(',', $orphanTxs);
			pg_query("
			BEGIN;
			DELETE FROM tx_in WHERE transaction_id IN ($in);
			DELETE FROM tx_out WHERE transaction_id IN ($in);
			DELETE FROM transactions WHERE transaction_id IN ($in);
			COMMIT;
			");
		}
	}

	echo "\n";
}
