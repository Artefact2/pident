#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

require __DIR__.'/lib/inc.main.php';
$pg = $GLOBALS['pg'];

/* Make sure we have bitcoind */
if(strpos(shell_exec('bitcoind getblockbycount 42'), '00000000314e90489514c787d615cea50003af2023796ccdd085b6bcc1fa28f5') === false) {
	echo 'bitcoind not in $PATH, or unpatched bitcoind present (must have getblockbyhash/getblockbycount) !'."\n";
	die(1);
}

/* See if we need to do the initial dump */
$genesis = json_decode(shell_exec('bitcoind getblockbycount 0'), true);
$hasGenesis = pg_query_params($pg, 'SELECT COUNT(hash) FROM blocks WHERE hash = $1', array(hex2bits($genesis['hash'])));
$r = pg_fetch_row($hasGenesis);
$initialDump = ($r[0] == 0);
pg_free_result($hasGenesis);

$max = trim(shell_exec('bitcoind getblockcount'));
$c = strlen($max);

if($initialDump) {
	echo "Performing the initial dump. This step must only be done once, but it will take a long time !\nDO NOT INTERRUPT THE PROCESS.\n";
	pg_query('TRUNCATE TABLE blocks, transactions, tx_in, tx_out CASCADE');
	$start = 0;
} else {
	$recent = pg_query($pg, 'SELECT hash FROM blocks ORDER BY time DESC LIMIT 200');
	while($r = pg_fetch_row($recent)) {
		$stop[bits2hex($r[0])] = true;
	}

	for($i = $max; $i >= 0; --$i) {
		$blk = json_decode(shell_exec('bitcoind getblockbycount '.$i), true);
		if(isset($stop[$blk['hash']])) {
			$start = $i + 1;
			break;		
		}
	}
	if(!isset($start)) $start = 0;
}

for($i = $start; $i <= $max; ++$i) {
	$fI = str_pad($i, $c, '0', STR_PAD_LEFT);
	$blk = json_decode(shell_exec('bitcoind getblockbycount '.$i), true);

	echo "\r$fI/$max processing... (".$blk['hash'].")";

	insertBlock($i, $blk, ($max - $i) <= 120);
}

if(isset($fI)) {
	invalidateCache('index');
	invalidateCache('more');
	echo "\n";
}
