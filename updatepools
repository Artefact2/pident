#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

require __DIR__.'/lib/inc.main.php';

@unlink('cookies.txt');

$c = count($foundBy);
$cL = strlen($c);
$i = 0;
foreach($foundBy as $pool => $callback) {
	++$i;
	$fI = str_pad($i, $cL, '0', STR_PAD_LEFT);
	echo "\r$fI/$c fetched...";

	list($type, $in) = call_user_func($callback);
	if(count($in) == 0) continue;

	if($type == BLOCK_NUMBERS) {
		$minNumber = min($in);
		$in = implode(',', $in);
		$in = "number IN ($in)";
	} else if($type == BLOCK_HASHES) {
		$in = implode(',', array_map(function($h) { return "B'".hex2bits($h)."'"; }, $in));
		$minNumber = pg_fetch_row(pg_query("SELECT MIN(number) FROM blocks WHERE hash IN ($in)"));
		$minNumber = $minNumber[0];
		$in = "hash IN ($in)";
	} else {
		// WTF ?
		continue;
	}
	
	pg_query("
	BEGIN;
	UPDATE blocks SET found_by = null WHERE number >= $minNumber AND found_by = '$pool';
	UPDATE blocks SET found_by = '$pool' WHERE $in;
	COMMIT;
	");
}

echo "\n";

$latestNum = pg_fetch_row(pg_query("SELECT MAX(number) FROM blocks;"));
$latestNum = $latestNum[0];

$identified = cacheFetch('blocks_identified', $success);
if(!$success) $identified = array();

$threshold = $latestNum - $GLOBALS['conf']['maximum_backlog'];
$mostRecentQ = pg_query("
SELECT found_by AS pool, MAX(number) AS most_recent
FROM blocks
WHERE number >= $threshold
GROUP BY found_by
");
$mostRecent = array();
while($r = pg_fetch_row($mostRecentQ)) {
	$mostRecent[$r[0]] = $r[1];
}

$toIdentify = pg_query("
SELECT hash, number, found_by
FROM blocks
WHERE number >= $threshold
AND found_by IS NOT NULL
ORDER BY number ASC
");

$updatedPools = array();
$c = $latestNum;
$cL = strlen($latestNum);
while($r = pg_fetch_row($toIdentify)) {
	$fI = str_pad($r[1], $cL, '0', STR_PAD_LEFT);
	echo "\r$fI/$c identified...";

	$hash = bits2hex($r[0]);
	$pool = $r[2];

	if(!isset($identifyPayouts[$pool])) continue;
	if(isset($identified[$hash]) && $identified[$hash] === $pool) continue;

	pg_query("
	UPDATE tx_out SET is_payout = false
	FROM blocks_transactions
	WHERE blocks_transactions.transaction_id = tx_out.transaction_id
	AND block = B'".$r[0]."'
	");

	call_user_func($identifyPayouts[$pool], $hash);

	$identified[$hash] = $pool;
	invalidateCache('block', $hash);
	$updatedPools[$pool] = true;
}

if(isset($hash)) {
	cacheStore('blocks_identified', $identified);
	invalidateCache('index');
	invalidateCache('more');
	foreach($updatedPools as $pool => $nevermind) {
		invalidateCache('pool', $pool);
	}
	echo "\n";
}
