#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

ini_set('memory_limit', '512M');

require __DIR__.'/lib/inc.main.php';

echo "updating scores...";

$backlog = $GLOBALS['conf']['maximum_backlog'];
$tau = number_format($GLOBALS['conf']['tau'], 2, '.', '');

$latest = pg_fetch_row(pg_query('SELECT MAX(number) FROM blocks;'));
$latest = $latest[0];

$req = "
SELECT address, found_by, SUM(EXP(-($latest - number) / $tau))
FROM blocks
JOIN blocks_transactions ON blocks.hash = blocks_transactions.block
JOIN tx_out ON tx_out.transaction_id = blocks_transactions.transaction_id AND tx_out.is_payout = true
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
GROUP BY address, found_by
";

$q = 'BEGIN; TRUNCATE TABLE scores; INSERT INTO scores(address, pool, score) VALUES ';
$req = pg_query($req);
$values = array();
while($r = pg_fetch_row($req)) {
	list($address, $pool, $score) = $r;
	$values[] = "(B'$address', '$pool', $score)";
}

$q .= implode(',', $values);
$q .= '; COMMIT;';
pg_query($q);

echo "\nupdating score averages...";

$req = "
SELECT blocks.found_by, AVG(score_total)
FROM blocks 
JOIN scores_blocks ON scores_blocks.block = blocks.hash AND scores_blocks.pool = blocks.found_by 
GROUP BY blocks.found_by
";

$q = 'BEGIN; TRUNCATE TABLE scores_pool_averages; INSERT INTO scores_pool_averages(pool, average_score) VALUES ';
$req = pg_query($req);
$values = array();
while($r = pg_fetch_row($req)) {
	list($pool, $avg) = $r;
	$values[] = "('$pool', $avg)";
}


$q .= implode(',', $values);
$q .= '; COMMIT;';
pg_query($q);

invalidateCache('score', '*', true);

echo "\nupdating accuracy cache...";

$accuracy = array();
$req = pg_query("
SELECT hash, found_by
FROM blocks
WHERE number > ($latest - $tau)
AND found_by IS NOT NULL
");

while($r = pg_fetch_row($req)) {
	$pool = $r[1];
	if(!isset($accuracy[$pool])) {
		$accuracy[$pool]['sample_size'] = 0;
		$accuracy[$pool]['false_positives'] = 0;
		$accuracy[$pool]['accuracy'] = array();
	}

	$block = bits2hex($r[0]);
	$scores = fetchScores($block);
	$guess = identifyPool(array_pop($scores));

	$accuracy[$pool]['sample_size']++;
	if($guess === null) continue;

	list($confidence, $maybePool) = $guess;
	if($pool == $maybePool) {
		if(!isset($accuracy[$pool]['accuracy'][$confidence])) {
			$accuracy[$pool]['accuracy'][$confidence] = 0;
		}

		$accuracy[$pool]['accuracy'][$confidence]++;
	} else {
		$accuracy[$pool]['false_positives']++;
	}
}

cacheStore('accuracy', $accuracy);

invalidateCache('accuracy');

echo "\n";
