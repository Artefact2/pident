#!/usr/bin/env php
<?php
/* Author : Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

ini_set('memory_limit', '512M');

require __DIR__.'/lib/inc.main.php';

echo "updating scores...";

$backlog = $GLOBALS['conf']['maximum_backlog'];
$tau = number_format($GLOBALS['conf']['tau'], 2, '.', '');

$latest = pg_fetch_row(pg_query('SELECT MAX(number) FROM blocks;'));
$latest = $latest[0];

$req = "
BEGIN;
TRUNCATE TABLE scores;
INSERT INTO scores(address, pool, score) SELECT address, found_by, SUM(EXP(-($latest - number) / $tau))
FROM blocks
JOIN blocks_transactions ON blocks.hash = blocks_transactions.block
JOIN tx_out ON tx_out.transaction_id = blocks_transactions.transaction_id AND tx_out.is_payout = true
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
GROUP BY address, found_by;
COMMIT;
";

pg_query($req);

echo "\nupdating score averages...";

$q = 'BEGIN;
TRUNCATE TABLE scores_pool_averages;
INSERT INTO scores_pool_averages(
	pool, 
	score_average, score_stddev, 
	block_size_average, block_size_stddev,
	transaction_count_average, transaction_count_stddev,
	generation_addresses_average, generation_addresses_stddev,
	coinbase_distance_average, coinbase_distance_stddev
) VALUES ';

$values = array();
$rawValues = array();

$req = pg_query("
SELECT blocks.found_by, score_total
FROM blocks 
JOIN scores_blocks ON scores_blocks.block = blocks.hash AND scores_blocks.pool = blocks.found_by 
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
");
while($r = pg_fetch_row($req)) {
	$rawValues[$r[0]]['scores'][] = $r[1];
}

$req = pg_query("
SELECT blocks.found_by, size, coinbase
FROM blocks 
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
ORDER BY number ASC
");
while($r = pg_fetch_row($req)) {
	$rawValues[$r[0]]['sizes'][] = $r[1];
	$rawValues[$r[0]]['coinbases'][] = substr($r[2], 2);
}

$req = pg_query("
SELECT found_by, COUNT(address)
FROM tx_out
JOIN transactions ON transactions.transaction_id = tx_out.transaction_id AND transactions.is_generation = true
JOIN blocks_transactions ON tx_out.transaction_id = blocks_transactions.transaction_id
JOIN blocks ON blocks.hash = blocks_transactions.block
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
GROUP BY blocks.hash, blocks.found_by
");
while($r = pg_fetch_row($req)) {
	$rawValues[$r[0]]['generation_addresses'][] = $r[1];
}

$req = pg_query("
SELECT found_by, COUNT(transaction_id)
FROM blocks
JOIN blocks_transactions ON blocks.hash = blocks_transactions.block
WHERE number >= ($latest - $backlog)
AND found_by IS NOT NULL
GROUP BY blocks.hash, blocks.found_by
");
while($r = pg_fetch_row($req)) {
	$rawValues[$r[0]]['transactions_counts'][] = $r[1];
}

foreach($rawValues as $pool => $pData) {
	if(!isset($pData['scores'])) {echo 'a'; continue;}
	$scoreAvg = average($pData['scores']);
	$scoreDev = stddev($pData['scores'], $scoreAvg);
	if($scoreDev === null) {echo 'b'; continue;}

	if(!isset($pData['sizes'])) {echo 'c'; continue;}
	$sizesAvg = average($pData['sizes']);
	$sizesDev = stddev($pData['sizes'], $sizesAvg);
	if($sizesDev === null) {echo 'd'; continue;}

	if(!isset($pData['transactions_counts'])) {echo 'e'; continue;}
	$txAvg = average($pData['transactions_counts']);
	$txDev = stddev($pData['transactions_counts'], $txAvg);
	if($txDev === null) {echo 'f'; continue;}

	if(!isset($pData['generation_addresses'])) {echo 'g'; continue;}
	$genAvg = average($pData['generation_addresses']);
	$genDev = stddev($pData['generation_addresses'], $genAvg);
	if($genDev === null) {echo 'h'; continue;}

	if(!isset($pData['coinbases'])) {echo 'i'; continue;}
	$distances = array();
	$cC = count($pData['coinbases']);
	for($j = 0; $j < ($cC - 1); ++$j) {
		$distances[] = levenshtein($pData['coinbases'][$j], $pData['coinbases'][$j + 1]);
	}
	$cbdAvg = average($distances);
	$cbdDev = stddev($distances, $cbdAvg);
	if($cbdDev === null) {echo 'j'; continue;}

	$values[] = "('$pool', $scoreAvg, $scoreDev, $sizesAvg, $sizesDev, $txAvg, $txDev, $genAvg, $genDev, $cbdAvg, $cbdDev)";
}

$q .= implode(',', $values);
$q .= '; COMMIT;';
pg_query($q);

invalidateCache('score', '*', true);

echo "\nupdating accuracy cache...";

$accuracy = array();
$req = pg_query("
SELECT hash, found_by
FROM blocks
WHERE number > ($latest - $tau)
AND found_by IS NOT NULL
");

while($r = pg_fetch_row($req)) {
	$pool = $r[1];
	if(!isset($accuracy[$pool])) {
		$accuracy[$pool]['sample_size'] = 0;
		$accuracy[$pool]['false_positives'] = 0;
		$accuracy[$pool]['accuracy'] = array();
	}

	$block = bits2hex($r[0]);
	$scores = fetchScores($block);
	$guess = identifyPool($scores);

	$accuracy[$pool]['sample_size']++;
	if($guess === null) continue;

	list($confidence, $maybePool) = $guess;
	if($pool == $maybePool) {
		if(!isset($accuracy[$pool]['accuracy'][$confidence])) {
			$accuracy[$pool]['accuracy'][$confidence] = 0;
		}

		$accuracy[$pool]['accuracy'][$confidence]++;
	} else {
		$accuracy[$pool]['false_positives']++;
	}
}

cacheStore('accuracy', $accuracy);

invalidateCache('accuracy');

echo "\n";
